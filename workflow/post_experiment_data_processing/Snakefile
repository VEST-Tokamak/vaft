###############################################################################
#  Snakefile
#  Usage example: snakemake --cores 8 --configfile config.yaml
###############################################################################

# --------------------------------------------------------------------------- #
# 0) Configuration file
# --------------------------------------------------------------------------- #
configfile: "config.yaml"

# --------------------------------------------------------------------------- #
# 1) Global constants
# --------------------------------------------------------------------------- #
BASE_DIR = "/srv/vest.filedb/public"             # Base path for all output
SHOTS    = config["shots"]                       # List of shot numbers to process
IMAS_VER = config["IMAS_setting"]["version"]     # IMAS IDS version folder (e.g. "3")
DCON_DIR = config["dcon_setting"]["stability_analysis_dir"]

# --------------------------------------------------------------------------- #
# 2) Utility functions
# --------------------------------------------------------------------------- #
def get_dcon_cores(wildcards, threads):
    """
    Determine how many cores to allocate for each DCON run.

    Logic:
      * Use two-thirds of the cores provided via the --cores CLI flag
      * Minimum 4 and maximum 20
    """
    return max(4, min(20, int(threads * 2 / 3)))

# --------------------------------------------------------------------------- #
# 3) Final targets (rule all)
# --------------------------------------------------------------------------- #
rule all:
    input:
        # 3-1. Raw DaQ ------------------------------------------------------ #
        expand("{base_dir}/{shot}/diagnostics/shot_{shot}.json.gz",
               base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/diagnostics/shot_{shot}_comparison.png",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # 3-2. Diagnostics -------------------------------------------------- #
        # expand("{base_dir}/{shot}/omas/{shot}_diagnostics.json",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/omas/plots/{shot}_diagnostics.png",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-3. Eddy current ------------------------------------------------- #
        # expand("{base_dir}/{shot}/omas/{shot}_eddy.json",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/omas/plots/{shot}_eddy_outbz_probe.png",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-4. Constraints -------------------------------------------------- #
        # expand("{base_dir}/{shot}/omas/{shot}_constraints.json",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-5. EFIT reconstruction ----------------------------------------- #
        # expand("{base_dir}/{shot}/efit/kfile/kfiles_generated.txt",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/efit/gfile/gfiles_generated.txt",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/omas/{shot}_efit.json",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-6. CHEASE equilibrium refinement ------------------------------- #
        # expand("{base_dir}/{shot}/chease/refined_gfiles_generated.txt",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/omas/{shot}_chease.json",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-7. Linear MHD stability (GPEC) ---------------------------------- #
        # expand("{base_dir}/{shot}/gpec/stability_analysis_generated.txt",
        #        base_dir=BASE_DIR, shot=SHOTS),
        # expand("{base_dir}/{shot}/omas/{shot}_mhd_linear.json",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-8. Merged ODS file --------------------------------------------- #
        # expand("{base_dir}/{shot}/omas/{shot}_combined.json",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-9. Flag that data were saved to HSDS ---------------------------- #
        # expand("{base_dir}/{shot}/omas/data_saved.txt",
        #        base_dir=BASE_DIR, shot=SHOTS),

        # # 3-10. IMAS IDS export -------------------------------------------- #
        # expand("{base_dir}/{shot}/imas/{imas}/master.h5",
        #        base_dir=BASE_DIR, shot=SHOTS, imas=[IMAS_VER]),
               
############################################################
# Diagnostics Processing (Modular Scripts)
############################################################

rule extract_daq_raw_data:
    output:
        "{BASE_DIR}/{shot}/diagnostics/shot_{shot}.json.gz"
    log:
        "{BASE_DIR}/{shot}/logs/extract_daq_raw_data.log"
    script:
        "extract_daq_raw_data.py"

rule generate_diagnostics_ods:
    output:
        "{BASE_DIR}/{shot}/omas/{shot}_diagnostics.json"
    log:
        "{BASE_DIR}/{shot}/logs/generate_diagnostics_ods.log"
    shell:
        """
        mkdir -p {BASE_DIR}/{wildcards.shot}/omas
        mkdir -p {BASE_DIR}/{wildcards.shot}/logs
        python generate_diagnostics_ods.py --shot {wildcards.shot} --output {output} > {log} 2>&1
        """


# rule plot_diagnostics_ods:
#     input:
#         "{BASE_DIR}/{shot}/omas/{shot}_diagnostics.json"
#     output:
#         "{BASE_DIR}/{shot}/omas/plots/{shot}_diagnostics.png"
#     log:
#         "{BASE_DIR}/{shot}/logs/plot_diagnostics_ods.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/omas/plots
#         python plot_diagnostics_ods.py --shot {wildcards.shot} --input {input} --output {output} > {log} 2>&1
#         """
# ############################################################
# # Eddy Current Calculation (Modular Scripts)
# ############################################################

# rule generate_eddy_ods:
#     input:
#         diag="{BASE_DIR}/{shot}/omas/{shot}_diagnostics.json"
#     params:
#         config="config.yaml"
#     output:
#         ods="{BASE_DIR}/{shot}/omas/{shot}_eddy.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/generate_eddy_ods.log"
#     shell:
#         """
#         python generate_eddy_ods.py --shot {wildcards.shot} --input {input.diag} --config {params.config} --output {output.ods} > {log} 2>&1
#         """

# rule plot_eddy_ods:
#     input:
#         ods="{BASE_DIR}/{shot}/omas/{shot}_eddy.json",
#     params:
#         config="config.yaml"
#     output:
#         plot="{BASE_DIR}/{shot}/omas/plots/{shot}_eddy_outbz_probe.png"
#     log:
#         "{BASE_DIR}/{shot}/logs/plot_eddy_ods.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python plot_eddy_ods.py --shot {wildcards.shot} --input {input.ods} --config {params.config} --output {output.plot} > {log} 2>&1
#         """

# ############################################################
# # Constraints Transformation (Modular Scripts)
# ############################################################

# rule generate_constraints_ods:
#     input:
#         diag="{BASE_DIR}/{shot}/omas/{shot}_diagnostics.json",
#         eddy="{BASE_DIR}/{shot}/omas/{shot}_eddy.json"
#     params:
#         config="config.yaml"
#     output:
#         ods="{BASE_DIR}/{shot}/omas/{shot}_constraints.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/generate_constraints_ods.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python generate_constraints_ods.py --shot {wildcards.shot} --diag_ods {input.diag} --eddy_ods {input.eddy} --config {params.config} --output {output.ods} > {log} 2>&1
#         """

# ############################################################
# # EFIT Execution (Modular Scripts)
# ############################################################

# rule generate_kfile:
#     input:
#         constraints="{BASE_DIR}/{shot}/omas/{shot}_constraints.json"
#     params:
#         config="config.yaml"
#     output:
#         touch("{BASE_DIR}/{shot}/efit/kfile/kfiles_generated.txt")
#     log:
#         "{BASE_DIR}/{shot}/logs/generate_kfile.log"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/efit
#         mkdir -p {BASE_DIR}/{wildcards.shot}/efit/kfile
#         python generate_kfile.py --shot {wildcards.shot} --constraints_ods {input.constraints} --config {params.config} --output {output} > {log} 2>&1
#         """

# rule run_efit_reconstruction:
#     input:
#         kfile="{BASE_DIR}/{shot}/efit/kfile/kfiles_generated.txt"
#     params:
#         config="config.yaml"
#     output:
#         "{BASE_DIR}/{shot}/efit/gfile/gfiles_generated.txt"
#     log:
#         "{BASE_DIR}/{shot}/logs/run_efit.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/efit/gfile
#         python run_efit_reconstruction.py --shot {wildcards.shot} --kfile {input.kfile} --config {params.config} --output {output} > {log} 2>&1
#         """

# rule generate_efit_ods:
#     input:
#         "{BASE_DIR}/{shot}/efit/gfile/gfiles_generated.txt"
#     output:
#         "{BASE_DIR}/{shot}/efit/efit_status.txt"
#     log:
#         "{BASE_DIR}/{shot}/logs/generate_efit_ods.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python generate_efit_ods.py --shot {wildcards.shot} --input {input}  --output {output} > {log} 2>&1
#         """

# ############################################################
# # add information to the DB after EFIT run
# ############################################################
# # rule run_DB_add_efit:
# #     input:
# #         "{BASE_DIR}/{shot}/efit/efit_status.txt"
# #     params:
# #         config="config.yaml",
# #         shot="{shot}"
# #     output:
# #         touch("{BASE_DIR}/{shot}/efit/DB_efit_status.txt")
# #     log:
# #         "{BASE_DIR}/{shot}/logs/run_DB_add_efit.log"
# #     shell:
# #         """
# #         python run_add_efit.py --shot {wildcards.shot} --input {input} --config {params.config}  --output {output} > {log} 2>&1
# #         """


# ############################################################
# # Combine ODS
# ############################################################

# rule combine_ods:
#     input:
#         status="{BASE_DIR}/{shot}/efit/efit_status.txt"
#         # constraints="{BASE_DIR}/{shot}/omas/{shot}_constraints.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/combine_ods.log"    
#     output:
#         "{BASE_DIR}/{shot}/omas/{shot}_combined.json"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python combine_ods.py --status {input.status} --output {output} --shot {params.shot} > {log} 2>&1
#         """

# ############################################################
# # Convert ODS to IDS
# ############################################################

# rule convert2ids:
#     input:
#         "{BASE_DIR}/{shot}/omas/{shot}_combined.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/convert2ids.log"    
#     output:
# #        "{BASE_DIR}/{shot}/imas/{RUN}/master.h5"
#         "{BASE_DIR}/{shot}/imas/1/master.h5"
#     params:
#         shot="{shot}",
#         run=1
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/imas
#         module load IMAS/{IMAS}
#         module load python/3.10
#         python convert2ids.py --input {input} --output {output} --shot {params.shot} --run {params.run} > {log} 2>&1
#         """

# ############################################################
# # Convert IDS to older IDS
# ############################################################

# rule convert2old:
#     input:
# #        "{BASE_DIR}/{shot}/imas/{RUN}/master.h5"
#         "{BASE_DIR}/{shot}/imas/1/master.h5"
#     log:
#         "{BASE_DIR}/{shot}/logs/convert2old.log"    
#     output:
# #        "{BASE_DIR}/{shot}/imas/{RUN2}/master.h5"
#         "{BASE_DIR}/{shot}/imas/2/master.h5"
#     params:
#         config="config.yaml",
#         shot="{shot}",
#         run1=1,
#         run2=2
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/imas
#         module load python/3.10
#         python convert2old.py --config {params.config} --output {output} --shot {params.shot} --run1 {params.run1} --run2 {params.run2} > {log} 2>&1
#         """

# rule save_hsds_db:
#     input:
#         ods="{BASE_DIR}/{shot}/omas/{shot}_combined.json"
#     output:
#         touch("{BASE_DIR}/{shot}/omas/data_saved.txt")
#     log:
#         "{BASE_DIR}/{shot}/logs/save_hsds_db.log"
#     params:
#         shot="{shot}"
#     conda:
#         "base"
#     shell:
#         """
#         python save_hsds_db.py --input {input.ods} --shot {params.shot} > {log} 2>&1
#         """

# ############################################################
# # Run Chease (Modular Scripts)
# ############################################################
# rule run_chease:
#     input:
#         gfile="{BASE_DIR}/{shot}/efit/gfile/gfiles_generated.txt",
#     output:
#         "{BASE_DIR}/{shot}/chease/refined_gfiles_generated.txt"
#     log:
#         "{BASE_DIR}/{shot}/logs/run_chease.log"
#     params:
#         shot="{shot}",
#         config="config.yaml"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/chease
#         python run_chease.py --shot {wildcards.shot} --gfile {input.gfile} --config {params.config} --output {output} > {log} 2>&1
#         """

# rule generate_chease_ods:
#     input:
#         efit="{BASE_DIR}/{shot}/efit/gfile/gfiles_generated.txt",
#         chease="{BASE_DIR}/{shot}/chease/refined_gfiles_generated.txt",
#     output:
#         "{BASE_DIR}/{shot}/chease/chease_status.txt"
#     log:
#         "{BASE_DIR}/{shot}/logs/generate_chease_ods.log"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python generate_chease_ods.py --shot {wildcards.shot} --efit {input.efit} --chease {input.chease} --output {output} > {log} 2>&1
#         """


# rule plot_chease:
#     input:
#         original_gfile="{BASE_DIR}/{shot}/efit/gfile/gfiles_generated.txt",
#         refined_gfile="{BASE_DIR}/{shot}/chease/refined_gfiles_generated.txt",
#     output:
#         touch("{BASE_DIR}/{shot}/chease/plots/plot_refined_gfiles_generated.txt")
#     log:
#         "{BASE_DIR}/{shot}/logs/plot_chease.log"
#     params:
#         shot="{shot}",
#         config="config.yaml"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/chease/plots
#         python plot_chease.py --shot {wildcards.shot} --original_gfile {input.original_gfile} --refined_gfile {input.refined_gfile} --config {params.config} --output {output} > {log} 2>&1
#         """

# ############################################################
# # Combine chease ODS
# ############################################################

# rule combine_chease_ods:
#     input:
#         status="{BASE_DIR}/{shot}/chease/chease_status.txt"
#         # constraints="{BASE_DIR}/{shot}/omas/{shot}_constraints.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/combine_chease_ods.log"    
#     output:
#         "{BASE_DIR}/{shot}/omas/{shot}_combined_chease.json"
#     params:
#         shot="{shot}"
#     shell:
#         """
#         python combine_chease_ods.py --status {input.status} --output {output} --shot {params.shot} > {log} 2>&1
#         """

# ############################################################
# # Convert ODS chease to IDS
# ############################################################

# rule convertchease2ids:
#     input:
#         "{BASE_DIR}/{shot}/omas/{shot}_combined_chease.json"
#     log:
#         "{BASE_DIR}/{shot}/logs/convertchease2ids.log"    
#     output:
# #        "{BASE_DIR}/{shot}/imas/{RUN}/master.h5"
#         "{BASE_DIR}/{shot}/imas/3/master.h5"
#     params:
#         shot="{shot}",
#         run=3
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/imas
#         module load IMAS/{IMAS}
#         module load python/3.10
#         python convertchease2ids.py --input {input} --output {output} --shot {params.shot} --run {params.run} > {log} 2>&1
#         """

# rule convertchease2old:
#     input:
# #        "{BASE_DIR}/{shot}/imas/{RUN}/master.h5"
#         "{BASE_DIR}/{shot}/imas/3/master.h5"
#     log:
#         "{BASE_DIR}/{shot}/logs/convertchease2old.log"    
#     output:
# #        "{BASE_DIR}/{shot}/imas/{RUN2}/master.h5"
#         "{BASE_DIR}/{shot}/imas/4/master.h5"
#     params:
#         config="config.yaml",
#         shot="{shot}",
#         run1=3,
#         run2=4
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/imas
#         module load python/3.10
#         python convertchease2old.py --config {params.config} --output {output} --shot {params.shot} --run1 {params.run1} --run2 {params.run2} > {log} 2>&1
#         """

# ############################################################
# # Run DCON (Modular Scripts)
# ############################################################
# rule run_dcon:
#     input:
#         gfile="{BASE_DIR}/{shot}/chease/refined_gfiles_generated.txt"
#     params:
#         config="config.yaml"
#     output:
#         touch("{BASE_DIR}/{shot}/gpec/gpec_generated.txt")
#     log:
#         "{BASE_DIR}/{shot}/logs/run_gpec.log"
#     resources:
#         cores=lambda wildcards, threads: get_dcon_cores(wildcards, threads)
#     params:
#         shot="{shot}"
#     shell:
#         """
#         mkdir -p {BASE_DIR}/{wildcards.shot}/gpec
#         mkdir -p {BASE_DIR}/{wildcards.shot}/gpec/plots
#         module use /home/user1/GPEC/module
#         module load GPEC-dev
#         ulimit -s unlimited
#         python run_parallel_dcon.py --shot {wildcards.shot} --input {BASE_DIR}/{wildcards.shot}/chease --output {BASE_DIR}/{wildcards.shot}/gpec --dcon {DCON_DIR} --cores {resources.cores} > {log} 2>&1
#         """
# #        python run_dcon.py --shot {wildcards.shot} --gfile {input.gfile} --config {params.config} --output {output}  > {log} 2>&1


# ############################################################
# # add information to the DB after GPEC run
# ############################################################
# rule run_DB_add_gpec:
#     input:
#         "{BASE_DIR}/{shot}/gpec/gpec_generated.txt"
#     params:
#         config="config.yaml",
#         shot="{shot}"
#     output:
#         touch("{BASE_DIR}/{shot}/gpec/DB_gpec_status.txt")
#     log:
#         "{BASE_DIR}/{shot}/logs/run_DB_add_gpec.log"
#     shell:
#         """
#         python run_add_gpec.py --shot {wildcards.shot} --input {input} --config {params.config}  --output {output} > {log} 2>&1
#         """



