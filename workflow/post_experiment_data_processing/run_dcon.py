#!/usr/bin/env python3
"""
Script: run_dcon.py

Description:
    Run dcon for all refined gfile available.

Inputs:
    --shot   <shot_number>    Shot number/ID for logging context.
    --gfile  <gfile_path>     Path to the refined EFIT gfile (equilibrium reconstructed by EFIT and refined by CHEASE).
    --config  <yaml file>     Configuration file for CHEASE path.
    --output <chease_output>    dcon_generated.txt.

Outputs:
    - DCON raw output files generated by DCON, RDCON, STRIDE.

Logging:
    - Logs are written to /srv/vest.filedb/public/<shot_number>/logs/run_dcon.log (captures CHEASE run info and errors).
"""
import os
import sys
import argparse
import logging

from VEST_efit import dcon_run
import yaml
import numpy as np

def get_dcon_cores(wildcards, threads):
    """Calculate number of cores to use for DCON
    Uses 2/3 of available cores, minimum 4, maximum 20"""
    suggested_cores = max(4, min(20, int(threads * 2/3)))
    return suggested_cores

def main():
    parser = argparse.ArgumentParser(description="Run GPEC.")
    parser.add_argument("--shot", required=True, help="Shot number/ID for logging context.")
    parser.add_argument("--gfile", required=True, help="Path to the refined EFIT input gfile.")
    parser.add_argument("--config", required=True, help="yaml file containing the options.")
    parser.add_argument("--output", required=True, help="Path to save the GPEC output raw file.")
    args = parser.parse_args()

    shot = args.shot
    gfile = args.gfile
    config_file = args.config
    output_file = args.output
    output_dir=os.path.dirname(output_file) # 
    save_dir=os.path.dirname(gfile) # chease
#    save_dir=os.path.dirname(save_dir) # 

    # Set up logging
    log_dir = f"/srv/vest.filedb/public/{shot}/logs"
    os.makedirs(log_dir, exist_ok=True)
    log_path = os.path.join(log_dir, "run_gpec.log")
    logging.basicConfig(filename=log_path, level=logging.INFO,
                        format="%(asctime)s [%(levelname)s] %(message)s",
                        datefmt="%Y-%m-%d %H:%M:%S")
    try:
        if config_file:
            logging.info(f"Using configuration from {config_file} for eddy calculation")
            # Read configuration yaml file
            with open(config_file, "r") as f:
                config = yaml.safe_load(f)
            dcon_dir=config['dcon_setting']['stability_analysis_dir']
        else:
            logging.info(f"Using default configuration for eddy calculation")
            dcon_dir= '/home/user1/test/laurent/VEST_database/OMAS'

        logging.info(f"Starting DCON run for shot {shot} using gfile {gfile}")
        # Ensure the output directory exists

        dcon_run(int(shot), save_dir,output_dir,dcon_dir)

        logging.info(f"DCON run completed for shot {shot}, output saved to {output_file}")
    except Exception as e:
        logging.error(f"Error in run_chease: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main()